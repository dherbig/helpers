AWS Instructions:

This explains how to deploy Django to AWS step by step.
Read AWS CopyPasta.txt for just the commands for you to copy and paste into your terminal.

Go to AWS.
Services -> Compute -> EC2

Choose an AMI (look for free things)
	Review and Launch

Go to Configure Security Group
	Add 2 rules: HTTP and HTTPS, and make their 'source' = Anywhere.
	Change the SSH source to My IP
	Review and Launch

Launch

Select "Create a new key pair" and name it. .pem file.
	Download the key pair.
		Keep this safe (eg. not GitHub!). You can only download this once!
	Launch Instance!

Click "Connect" and follow the commands to get into your server.  Use Git Bash.
	ssh -i "AWSrepo.pem" ubuntu@ec2-35-167-67-31.us-west-2.compute.amazonaws.com


Go back to the EC2 dashboard.
	On left bar -> Instances
	Name your server!
	Find / copy the IPv4 Public IP

DO THIS NOW TO AVOID USING VIM LATER
**	Go to the settings.py of the program to put up there
	Paste IPv4 address into 'ALLOWED_HOSTS = []' in quotes
	Paste the following into the bottom of the file:
		STATIC_ROOT = os.path.join(BASE_DIR, "static/")
	OPTIONAL:
		Set DEBUG to False to stop the debug vomit

Navigate to the project's root folder (make sure your environment is on!!):
	Make a txt file with a list of all your site's dependencies:
	pip freeze > requirements.txt
In Bash:
	go to the file directory you want:
		nul>.gitignore     --> Allows you to specifiy files for git not to upload. Optional.
			Add the lines:
				*.pyc
				venv/
	Start a new git:
		git init
		git add README.md //Optional
		git commit -m "first commit"
		git remote add origin https://github.com/example/example.git    //Or whatever it is
		git push -u origin master

Open Git Bash
	go to AWS page, select the server you want, and click "Connect"
	In Bash, navigate to the location of the .pem file
		chmod 400 example.pem

	follow instructions on AWS page, type in "ssh -i......[copy the rest]"
	When asked, say "Yes"

This puts you in control of the server.

Type the following commands:
	//Update the server
		sudo apt-get updates
	//Install python etc
		sudo apt-get install python-pip python-dev nginx git
	//Update again, so the server knows that you've been installing things
		sudo apt-get update
	//install virtualEnv
		sudo pip install virtualenv
	//Clone your project from Git Hub
		git clone [[URL GOES HERE]]
	//go into the repo
		cd repoName
	//Look at what's there and make sure manage.py is in
		ls
	//Make a new virtual env
		virtualenv venv
		source venv/bin/activate
	//Install all your dependencies
		pip install -r requirements.txt
		pip install django bcrypt django-extensions
		pip install gunicorn

Navigate into the main project directory (project_name/project_name/), where settings.py hangs out, and edit settings
	cd project_name
	sudo vim settings.py
	[[The things to do here were already done on line 25,  marked with **]]
		# Inside settings.py
		# modify these lines
		DEBUG = False
		ALLOWED_HOSTS = ['{{yourEC2.public.ip}}']
		# add the line below to the bottom of the file
		STATIC_ROOT = os.path.join(BASE_DIR, "static/")

	//Go back to root folder to save
		python manage.py collectstatic #say yes

Test Gunicorn by having it look at the project's wsgi.py file:
	gunicorn --bind 0.0.0.0:8000 {{project_name}}.wsgi:application
	ctrl-c to exit the process
Deactivate your venv
	deactivate
Set up Gunicorn to run as a service
	//Make a new file
		sudo vim /etc/systemd/system/gunicorn.service
	//Literally type 'i'
		i


//then copy paste this into vim CHANGE NAMES BEFORE COPYING
[Unit]
Description=gunicorn daemon
After=network.target
[Service]
User=ubuntu
Group=www-data
WorkingDirectory=/home/ubuntu/{{repoName}}
ExecStart=/home/ubuntu/{{repoName}}/venv/bin/gunicorn --workers 3 --bind unix:/home/ubuntu/{{repoName}}/{{projectName}}.sock {{projectName}}.wsgi:application
[Install]
WantedBy=multi-user.target

//Edit the text to match your repoName and project_name
// hit esc to get out of the editor, then ':/wq'

//Configure gunicorn to start on boot
	sudo systemctl daemon-reload
	sudo systemctl start gunicorn
	sudo systemctl enable gunicorn

//Last thing to edit:
	sudo vim /etc/nginx/sites-available/{{projectName}}

Add the following to your new document, editing whatâ€™s inside curly braces {{}}:
EDIT BEFORE COPYING!!

server {
  listen 80;
  server_name {{yourPublicIP}};
  location = /favicon.ico { access_log off; log_not_found off; }
  location /static/ {
      root /home/ubuntu/{{myRepoName}};
  }
  location / {
      include proxy_params;
      proxy_pass http://unix:/home/ubuntu/{{myRepoName}}/{{projectName}}.sock;
  }
}

Esc, ":/wq", enter

Now in terminal, run the following (taking note of the space after {{projectName}}):

ubuntu@54.162.31.253:~$ sudo ln -s /etc/nginx/sites-available/{{projectName}} /etc/nginx/sites-enabled
ubuntu@54.162.31.253:~$ sudo nginx -t

sudo rm /etc/nginx/sites-enabled/default
sudo service nginx restart


Reconnecting to the server and updating the iP
	In AWS, select the server and in the description, in "security groups", select "launch-wizard".
	Click the "inbound" tab, then select edit
	Go to the source dropdown for the SSH option, reselect My IP, then click save.
