C# EF Core Setup Checklist

From a fresh yo candyman:

0.	Insert into project.json:

For MySQL:
"MySQL.Data.EntityFrameworkCore": "7.0.5-ir21"  //For MySQL

OR

For Postgres SQL:

"tools": {
    "Microsoft.EntityFrameworkCore.Tools": "1.0.0-preview2-final"
},
"dependencies": {
    //Other dependencies
    "Npgsql.EntityFrameworkCore.PostgreSQL": "1.0.0-*",
    "Microsoft.EntityFrameworkCore.Design": {
        "version": "1.0.0-preview2-final",
        "type": "build"
    }
}

FOR ALL
"Microsoft.Extensions.Configuration.FileExtensions": "1.0.0-*",
"Microsoft.Extensions.Configuration.Json": "1.0.0-rc2-final"

1. 	Create appsettings.json
	- MAKE SURE TO UPDATE THE FIELDS

{
	"DbInfo" : {
		"Name": "MySqlConnection",
		"ConnectionString": "server=localhost;userid=root;password=root;port=8889;database=mydb;SslMode=None"
	}
}

2.	Edit Startup.cs
A. add dependencies

using Microsoft.AspNetCore.Hosting;
using MySQL.Data.EntityFrameworkCore.Extensions;	//For MySQL
using Microsoft.EntityFrameworkCore; 			// For PostgresSQL
using Microsoft.Extensions.Configuration;
using {{YOURPROJECT}}.Models;

B. add functions

public IConfiguration Configuration { get; private set; }

public Startup(IHostingEnvironment env){
	var builder = new ConfigurationBuilder().SetBasePath(env.ContentRootPath).AddJsonFile("appsettings.json", optional: true, reloadOnChange: true).AddEnvironmentVariables();
	Configuration = builder.Build();
}

C. Inside ConfigureServices, add

For MySQL:
	services.AddDbContext<DemoContext>(options =>options.UseMySQL(Configuration["DbInfo:ConnectionString"]));

For PostgresSQL:
	services.AddDbContext<YourContext>(options => options.UseNpgsql(Configuration["DBInfo:ConnectionString"]));

3.	Create /Models/YourContext.cs

using Microsoft.EntityFrameworkCore;
using MySQL.Data.EntityFrameworkCore.Extensions;		//For MySQL
namespace {{YOURPROJECT}}.Models{
	public class YourContext : DbContext{
		public YourContext(DbContextOptions<YourContext> options) : base(options)
		{
		}
		// For each model you need to CRUD
		public DbSet<MODELNAME> ModelNames {get;set;}
		// e.g. public DbSet<Car> Cars {get;set;}
	}
}

4.	Inject YourContext into your Controllers

In your controller:

private YourContext _context;
public HomeController(YourContext context){
	_context = context;
} 

-----------------------------------------------------------------

Example Implementation:

In your route:
	List<MODELNAME> variableName = _context.MODELNAME.ToList();
	return View(variableName);

In your CSHTML:
	@model List<PROJECTNAME.Models.MODELNAME>
	@{
		foreach(var THING in @Model){
			//Do the thing
		}
	}
